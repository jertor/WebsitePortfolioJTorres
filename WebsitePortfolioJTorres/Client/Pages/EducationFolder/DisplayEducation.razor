@using Microsoft.AspNetCore.Authorization
@using WebsitePortfolioJTorres.Shared.Models
@using WebsitePortfolioJTorres.Shared.Interfaces
@using WebsitePortfolioJTorres.Client.Services
@inject PublicClient PublicClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager _urlNavigationManager
@inject IResumeService _resumeService

<!--Header-->
<h3>@Title</h3>

<!--Body-->
@if (EduList == null)
{
    <p>Loading Education... </p>
}
else
{
    <table class="table table-sm">
        <thead class="thead-light">
            <tr>
                <th>School Name</th>
                <th>Major</th>
                <th>Start Date</th>
                <th>End Date</th>

                @if (authState.User.Identity.IsAuthenticated)
                {
                    <th>
                        <button type="submit" style="color:black" class="btn btn-primary" @onclick="NavToAddEducation"><b>  ADD NEW  </b></button>
                    </th>

                    //using Links to navigate
                    @*<th><a href="/editedu"> add </a></th>*@

                }

            </tr>
        </thead>
        <tbody>
            @foreach (Education school in EduList)
            {
                <tr>
                    <td>@school.SchoolName</td>
                    <th>@school.Major</th>
                    <td>@school.StartDate.ToString("MMM - yyyy")</td>
                    @if (school.EndDate >= DateTime.Today)
                    {
                        <td>Current</td>
                    }
                    else
                    {
                        <td>@school.EndDate.ToString("MMM - yyyy")</td>
                    }
                    @if (authState.User.Identity.IsAuthenticated)
                    {
                        <td>
                            <div class="btn-group">
                                <button type="button" class="btn btn-primary" style="color:black">Modify</button>
                                <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown">
                                    <span class="caret"></span>
                                </button>
                                <ul class="dropdown-menu" role="menu">
                                    <li><button class="btn-xs btn-success" @onclick="@(() => OnEditClick(school))">  EDIT  </button></li>
                                    <li><button class="btn-xs btn-danger" @onclick="@(() => DeleteOnValidSubmit(school.EduId))">DELETE</button></li>
                                </ul>

                            </div>
                        </td>
                    }

                </tr>
            }
        </tbody>
    </table>

    @if (bVisible)
    {
        <h5>Edit Education</h5>
        <!--Body-->
        <EditForm Model="@ResumeField">

            <!--SchoolName-->
            <div class="form-group row mb1">
                <label class="col-sm-3 col-form-label">School Name:</label>
                <div class="col-sm-3">
                    <InputText class="form-control"
                               @bind-Value="@ResumeField.MyEducation.SchoolName" /> <!--This was changed to text -->
                    @*<ValidationMessage For="@resume.MyContactInfo.Name"/>*@
                </div>
            </div>

            <!--Major-->
            <div class="form-group row mb1">
                <label class="col-sm-3 col-form-label">Major:</label>
                <div class="col-sm-3">
                    <InputText class="form-control"
                               @bind-Value="@ResumeField.MyEducation.Major" />
                </div>
            </div>


            <!--StartDate-->
            <div class="form-group row mb1">
                <label class="col-sm-3 col-form-label">Start:</label>
                <div class="col-sm-3">
                    <InputDate class="form-control"
                               @bind-Value="@ResumeField.MyEducation.StartDate" />
                    @*<ValidationMessage For="@resume.MyContactInfo.Name"/>*@
                </div>
            </div>
            <!--EndDate-->
            <div class="form-group row mb1">
                <label class="col-sm-3 col-form-label">End:</label>
                <div class="col-sm-3">
                    <InputDate class="form-control"
                               @bind-Value="@ResumeField.MyEducation.EndDate" />
                    @*<ValidationMessage For="@resume.MyContactInfo.Name"/>*@
                </div>
            </div>

            <!--Buttons-->

            <button class="btn-xs btn-success" @onclick="@UpdateOnValidSubmit">  update  </button>
            <button class="btn-xs btn-light" @onclick="@Cancel"> close </button>
            @*<button class="btn-xs btn-danger" @onclick="@DeleteOnValidSubmit"> delete </button>*@

        </EditForm>

    }
}



@code {

    [Parameter]
    public string Title { get; set; }
    [Inject]
    public IJSRuntime Js { get; set; }  // used for Javascript confirm delete dialog
    private bool bVisible = false;
    private AuthenticationState authState;


    List<Education> EduList = new List<Education>();
    Resume ResumeField = new Resume();
    //Education education = new Education();



    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        //EduList = await _resumeService.GetEducationInfo();
        EduList = await PublicClient.Client.GetFromJsonAsync<List<Education>>("api/education");
    }


    private async Task OnEditClick(Education eduSelected)
    {
        Console.WriteLine($"OnEdit Called for contact {eduSelected.SchoolName}");
        this.ResumeField.MyEducation = eduSelected;
        //this.education = eduSelected;

        bVisible = true;
        StateHasChanged();
    }

    private async Task UpdateOnValidSubmit()
    {
        Console.WriteLine("Update called from editeducation.razor");
        await _resumeService.UpdateEducation(ResumeField.MyEducation);
        StateHasChanged();
        //bVisible = false;
    }


    private async Task DeleteOnValidSubmit(int id)
    {
        Console.WriteLine("Delete called");
        var confirmed = await Js.InvokeAsync<bool>("confirm", $"Are you sure you want to delet{ResumeField.MyEducation.SchoolName} ?");
        if (confirmed)
        {
            await _resumeService.DeleteEducation(id);
            StateHasChanged();
        }

    }


    private void Cancel()
    {
        bVisible = false;
    }


    private void NavToAddEducation()
    {
        _urlNavigationManager.NavigateTo("addedu");
    }




}
