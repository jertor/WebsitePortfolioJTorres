@page "/blogpage"
@using Microsoft.AspNetCore.Authorization
@using WebsitePortfolioJTorres.Shared.Models
@using WebsitePortfolioJTorres.Shared.Interfaces
@using WebsitePortfolioJTorres.Client.Services
@inject PublicClient PublicClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager urlNavigationManager
@inject IBlogService _blogService

@*Header*@
<header style="background-color: black;">
    <button type="submit" class="btn btn-link" style="float:right" @onclick="ReturnHome"><b>Return Home</b></button>
    <br /><br />
    <h1 style="text-align:center; color:#fed136; border-bottom-style:groove">
        My Blog
    </h1>
</header>


<h1>@Title</h1>

<!-- Services-->
<section class="page-section" id="blogpage">
    <div class="container">
        <div class="text-center">
            <h3 class="section-heading text-uppercase">Blog Entries</h3>

            @*Body*@
            @if (BlogList == null)
            {
                <p>Loading Blog Entries</p>
            }
            else
            {
                <table class="table table-dark">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Text</th>
                            <th>Date Added</th>
                            @if (authState.User.Identity.IsAuthenticated)
                            {
                                <th>  </th>
                                <th><button type="submit" class="btn-sm btn-primary float-md-right" @onclick="NavToAddBlog">Add</button></th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (BlogEntry blog in BlogList)
                        {
                            <tr>
                                <td>@blog.Title</td>
                                <td>@blog.Text</td>
                                <td>@blog.Date</td>

                                @if (authState.User.Identity.IsAuthenticated)
                                {
                                    <td><button class="btn-xs btn-success float-md-right" @onclick="@(()=>OnEditClick(blog))">  edit  </button></td>
                                    <td><button class="btn-xs btn-danger float-md-right" @onclick="@(() => DeleteOnValidSubmit(blog.BlogId))">  delete  </button> </td>
                                }
                            </tr>

                        }
                    </tbody>
                </table>

                @if (bVisible)
                {

                    <EditForm Model="@Blog">

                        @*Title*@
                        <div class="form-group row mb1">
                            <label class="col-sm-3 col-form-label">Title:</label>
                            <div class="col-sm-3">
                                <InputText class="form-control"
                                           @bind-Value="@Blog.Title" />
                                @*<ValidationMessage For="@Blog.Title"/>*@
                            </div>
                        </div>

                        @*Text*@
                        <div class="form-group row mb1">
                            <label class="col-sm-3 col-form-label">Text:</label>
                            <div class="col-sm-3">
                                <InputText class="form-control"
                                           @bind-Value="@Blog.Text" />
                                @*<ValidationMessage For="@Blog.Text"/>*@
                            </div>
                        </div>

                        @*DateAdded*@
                        <div class="form-group row mb1">
                            <label class="col-sm-3 col-form-label">Date:</label>
                            <div class="col-sm-3">
                                <InputDate class="form-control"
                                           @bind-Value="@Blog.Date" />
                                @*<ValidationMessage For="@Blog.Date"/>*@
                            </div>
                        </div>

                        @*Checkbox For Assignment Specs*@
                        <div class="form-group row mb1">
                            <label class="col-sm-3 col-form-label">Checkbox:</label>
                            <div class="col-sm-3">
                                <InputCheckbox class="form-control"
                                               @bind-Value="@Blog.ExampleCheckbox" />
                                @*<ValidationMessage For="@Blog.ExampleCheckbox"/>*@
                            </div>
                            @if (Blog.ExampleCheckbox == true)
                            {
                                <p>show some text</p>
                            }
                        </div>


                        @*Buttons*@
                        <button class="btn-xs btn-success" @onclick="@UpdateOnValidSubmit">  update  </button>
                        <button class="btn-xs btn-light" @onclick="@Cancel"> close </button>

                    </EditForm>
                }

            }


        </div>
    </div>
</section>



@code {

    [Parameter]
    public string Title { get; set; }
    [Inject]
    public IJSRuntime Js { get; set; }  // used for Javascript confirm delete dialog
    private bool bVisible = false;
    private AuthenticationState authState;

    public BlogEntry Blog { get; set; } = new BlogEntry();

    List<BlogEntry> BlogList = new List<BlogEntry>();



    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        BlogList = await PublicClient.Client.GetFromJsonAsync<List<BlogEntry>>("api/blog"); //PublicClient class created to display to non authorized users
    }


    private async Task OnEditClick(BlogEntry blog)
    {
        Console.WriteLine($"OnEdit Called for contact {blog.Title}");
        this.Blog = blog;
        bVisible = true;
        StateHasChanged();
    }

    private async Task UpdateOnValidSubmit()
    {
        Console.WriteLine("Update called DisplayBlog.razor");
        await _blogService.UpdateBlog(Blog);
        StateHasChanged();
        //bVisible = false;
    }


    private async Task DeleteOnValidSubmit(int id)
    {
        Console.WriteLine("Delete called");
        var confirmed = await Js.InvokeAsync<bool>("confirm", $"Are you sure you want to delet{Blog.Title} ?");
        if (confirmed)
        {
            await _blogService.DeleteBlog(id);
            StateHasChanged();
        }

    }


    private void Cancel()
    {
        bVisible = false;
    }

    private void NavToAddBlog()
    {
        urlNavigationManager.NavigateTo("addblog");
    }

    private void ReturnHome()
    {
        urlNavigationManager.NavigateTo("/");
        StateHasChanged();
    }


}
